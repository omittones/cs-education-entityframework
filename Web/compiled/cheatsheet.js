//variable declaration
var implicit = '';
var explicit = null;
var usingLet = '';
//any is used to represent any unsafe type
var empty = function () { };
//using interface
//interface is implicitly implemented by anything that matches
var objectsImplicitlyImplement = {
    firstName: 'Foo',
    lastName: 'Bar'
};
//function that conforms to the interface
var isNotNull = function (object) {
    return object != null;
};
//we can force cast of anything that does not match the interface
var forcedCase = empty;
//function's parameter can define expected interface inline
//function receives object of inline type, and returns a string
function getFullName(object) {
    if (!isNotNull(object)) {
        throw 'Object should not be null!';
    }
    return object.firstName + ' ' + object.lastName;
}
//interfaces are implicitly implemented
getFullName(objectsImplicitlyImplement);
getFullName({ firstName: '', lastName: '' });
//class looks like this
var ElectricEngine = (function () {
    function ElectricEngine(noWatts, name) {
        this.noWatts = noWatts;
    }
    return ElectricEngine;
}());
var GasEngine = (function () {
    //public and private keyword immediately sets the fields
    function GasEngine(noPistons, name) {
        this.noPistons = noPistons;
        this.name = name;
    }
    return GasEngine;
}());
//a function can receive interface of a constructor
function createEngines(factory) {
    var engines = [];
    //interface of a constructor is used with new operator
    engines.push(new factory(1, 'first'));
    engines.push(new factory(2, 'second'));
    return engines;
}
//a static constructor definition has to be passed to the function
createEngines(GasEngine);
createEngines(ElectricEngine);
(function () {
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlYXRzaGVldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2NoZWF0c2hlZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNsQixJQUFJLFFBQVEsR0FBWSxJQUFJLENBQUM7QUFDN0IsSUFBSSxRQUFRLEdBQVksRUFBRSxDQUFDO0FBRTNCLDBDQUEwQztBQUMxQyxJQUFJLEtBQUssR0FBUyxjQUFXLENBQUMsQ0FBQztBQVUvQixpQkFBaUI7QUFDakIsOERBQThEO0FBQzlELElBQUksMEJBQTBCLEdBQWtCO0lBQzVDLFNBQVMsRUFBRyxLQUFLO0lBQ2pCLFFBQVEsRUFBRyxLQUFLO0NBQ25CLENBQUE7QUFPRCx5Q0FBeUM7QUFDekMsSUFBSSxTQUFTLEdBQXFCLFVBQVMsTUFBVTtJQUNqRCxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztBQUMxQixDQUFDLENBQUE7QUFFRCxpRUFBaUU7QUFDakUsSUFBSSxVQUFVLEdBQXVDLEtBQUssQ0FBQztBQUUzRCwyREFBMkQ7QUFDM0QsK0RBQStEO0FBQy9ELHFCQUFxQixNQUE2QztJQUM5RCxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsTUFBTSw0QkFBNEIsQ0FBQTtJQUN0QyxDQUFDO0lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDcEQsQ0FBQztBQUVELHVDQUF1QztBQUN2QyxXQUFXLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUN4QyxXQUFXLENBQUMsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFFLFFBQVEsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDO0FBT3pDLHVCQUF1QjtBQUN2QjtJQUlJLHdCQUFZLE9BQWUsRUFBRSxJQUFZO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFDTCxxQkFBQztBQUFELENBQUMsQUFQRCxJQU9DO0FBRUQ7SUFDSSx3REFBd0Q7SUFDeEQsbUJBQW9CLFNBQWlCLEVBQVMsSUFBWTtRQUF0QyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQVMsU0FBSSxHQUFKLElBQUksQ0FBUTtJQUFJLENBQUM7SUFDbkUsZ0JBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQztBQUVELG1EQUFtRDtBQUNuRCx1QkFBdUIsT0FBdUI7SUFDMUMsSUFBSSxPQUFPLEdBQWdCLEVBQUUsQ0FBQztJQUM5QixzREFBc0Q7SUFDdEQsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN0QyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUVELGtFQUFrRTtBQUNsRSxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDekIsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRTlCLENBQUM7QUFNRCxDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy92YXJpYWJsZSBkZWNsYXJhdGlvblxyXG52YXIgaW1wbGljaXQgPSAnJztcclxudmFyIGV4cGxpY2l0IDogc3RyaW5nID0gbnVsbDtcclxubGV0IHVzaW5nTGV0IDogc3RyaW5nID0gJyc7XHJcblxyXG4vL2FueSBpcyB1c2VkIHRvIHJlcHJlc2VudCBhbnkgdW5zYWZlIHR5cGVcclxubGV0IGVtcHR5IDogYW55ID0gZnVuY3Rpb24oKXt9O1xyXG5cclxuLy9jcmVhdGluZyBpbnRlcmZhY2VcclxuaW50ZXJmYWNlIElOYW1lZE9iamVjdCB7XHJcbiAgICBmaXJzdE5hbWU6c3RyaW5nLFxyXG4gICAgbGFzdE5hbWU6c3RyaW5nLFxyXG4gICAgLy9vcHRpb25hbCBwcm9wZXJ0eSBkb2VzIG5vdCBuZWVkIHRvIGV4aXN0XHJcbiAgICBhZ2U/Om51bWJlclxyXG59XHJcblxyXG4vL3VzaW5nIGludGVyZmFjZVxyXG4vL2ludGVyZmFjZSBpcyBpbXBsaWNpdGx5IGltcGxlbWVudGVkIGJ5IGFueXRoaW5nIHRoYXQgbWF0Y2hlc1xyXG52YXIgb2JqZWN0c0ltcGxpY2l0bHlJbXBsZW1lbnQgOiBJTmFtZWRPYmplY3QgPSB7XHJcbiAgICBmaXJzdE5hbWUgOiAnRm9vJyxcclxuICAgIGxhc3ROYW1lIDogJ0JhcidcclxufVxyXG5cclxuLy9jcmVhdGluZyBmdW5jdGlvbiBpbnRlcmZhY2VcclxuaW50ZXJmYWNlIElGaWx0ZXJGdW5jdGlvbiB7XHJcbiAgICAob2JqZWN0OmFueSkgOiBib29sZWFuXHJcbn1cclxuXHJcbi8vZnVuY3Rpb24gdGhhdCBjb25mb3JtcyB0byB0aGUgaW50ZXJmYWNlXHJcbmxldCBpc05vdE51bGwgOiBJRmlsdGVyRnVuY3Rpb24gPSBmdW5jdGlvbihvYmplY3Q6YW55KSB7XHJcbiAgICByZXR1cm4gb2JqZWN0ICE9IG51bGw7XHJcbn1cclxuXHJcbi8vd2UgY2FuIGZvcmNlIGNhc3Qgb2YgYW55dGhpbmcgdGhhdCBkb2VzIG5vdCBtYXRjaCB0aGUgaW50ZXJmYWNlXHJcbmxldCBmb3JjZWRDYXNlIDogSUZpbHRlckZ1bmN0aW9uID0gPElGaWx0ZXJGdW5jdGlvbj4gZW1wdHk7XHJcblxyXG4vL2Z1bmN0aW9uJ3MgcGFyYW1ldGVyIGNhbiBkZWZpbmUgZXhwZWN0ZWQgaW50ZXJmYWNlIGlubGluZVxyXG4vL2Z1bmN0aW9uIHJlY2VpdmVzIG9iamVjdCBvZiBpbmxpbmUgdHlwZSwgYW5kIHJldHVybnMgYSBzdHJpbmdcclxuZnVuY3Rpb24gZ2V0RnVsbE5hbWUob2JqZWN0OiB7IGZpcnN0TmFtZTpzdHJpbmcsIGxhc3ROYW1lOnN0cmluZyB9KSA6IHN0cmluZyB7XHJcbiAgICBpZiAoIWlzTm90TnVsbChvYmplY3QpKSB7XHJcbiAgICAgICAgdGhyb3cgJ09iamVjdCBzaG91bGQgbm90IGJlIG51bGwhJ1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9iamVjdC5maXJzdE5hbWUgKyAnICcgKyBvYmplY3QubGFzdE5hbWU7XHJcbn1cclxuXHJcbi8vaW50ZXJmYWNlcyBhcmUgaW1wbGljaXRseSBpbXBsZW1lbnRlZFxyXG5nZXRGdWxsTmFtZShvYmplY3RzSW1wbGljaXRseUltcGxlbWVudCk7XHJcbmdldEZ1bGxOYW1lKHtmaXJzdE5hbWU6JycsIGxhc3ROYW1lOicnfSk7XHJcblxyXG4vL2ludGVyZmFjZSBjYW4gc3BlY2lmeSBob3cgYSBjb25zdHJ1Y3RvciBzaG91bGQgbG9va2xpa2VcclxuaW50ZXJmYWNlIElFbmdpbmVGYWN0b3J5IHtcclxuICAgIG5ldyAoYXJnMTogbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiBhbnlcclxufVxyXG5cclxuLy9jbGFzcyBsb29rcyBsaWtlIHRoaXNcclxuY2xhc3MgRWxlY3RyaWNFbmdpbmUge1xyXG5cclxuICAgIC8vYSBwcml2YXRlIHByb3BlcnR5XHJcbiAgICBwcml2YXRlIG5vV2F0dHM6IG51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKG5vV2F0dHM6IG51bWJlciwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5ub1dhdHRzID0gbm9XYXR0cztcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgR2FzRW5naW5lIHtcclxuICAgIC8vcHVibGljIGFuZCBwcml2YXRlIGtleXdvcmQgaW1tZWRpYXRlbHkgc2V0cyB0aGUgZmllbGRzXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vUGlzdG9uczogbnVtYmVyLCBwdWJsaWMgbmFtZTogc3RyaW5nKSB7IH1cclxufVxyXG5cclxuLy9hIGZ1bmN0aW9uIGNhbiByZWNlaXZlIGludGVyZmFjZSBvZiBhIGNvbnN0cnVjdG9yXHJcbmZ1bmN0aW9uIGNyZWF0ZUVuZ2luZXMoZmFjdG9yeTogSUVuZ2luZUZhY3RvcnkpIDogQXJyYXk8YW55PiB7XHJcbiAgICBsZXQgZW5naW5lcyA6IEFycmF5PGFueT4gPSBbXTtcclxuICAgIC8vaW50ZXJmYWNlIG9mIGEgY29uc3RydWN0b3IgaXMgdXNlZCB3aXRoIG5ldyBvcGVyYXRvclxyXG4gICAgZW5naW5lcy5wdXNoKG5ldyBmYWN0b3J5KDEsICdmaXJzdCcpKTtcclxuICAgIGVuZ2luZXMucHVzaChuZXcgZmFjdG9yeSgyLCAnc2Vjb25kJykpO1xyXG4gICAgcmV0dXJuIGVuZ2luZXM7XHJcbn1cclxuXHJcbi8vYSBzdGF0aWMgY29uc3RydWN0b3IgZGVmaW5pdGlvbiBoYXMgdG8gYmUgcGFzc2VkIHRvIHRoZSBmdW5jdGlvblxyXG5jcmVhdGVFbmdpbmVzKEdhc0VuZ2luZSk7XHJcbmNyZWF0ZUVuZ2luZXMoRWxlY3RyaWNFbmdpbmUpO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuXHJcblxyXG5cclxuXHJcbn0pKCk7Il19